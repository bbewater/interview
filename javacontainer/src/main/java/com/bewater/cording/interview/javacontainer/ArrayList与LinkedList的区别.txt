1.底层数据结构方面
    ArrayList底层数据结构是一个Object类型的数组 初始容量为10  每次扩容为原来的1.5倍
    LinkedList底层数据结构是一个双向链表

2.随机访问和插入删除的效率
    ArrayList:  由于ArrayList底层是一个数组  数组在内存中是连续的 所以ArrayList的随机访问效率高 时间复杂度为O(1)
                又是由于数组是连续的所以它插入删除需要移动元素  所以ArrayList的插入和删除效率较低
    LinkedList: LinkedList底层是一个双向链表不像数组那样有下标的概念 他只有前指针和后指针 随机访问元素只能从第一个元素一个个往下找
                随机访问效率比较低
                LinkedList首尾插入删除元素比较快 只需要重新建立起指针的指向关系 但是如果要在链表中间插入删除元素 就需要考虑查找元素的时间复杂度了
3.线程安全方面
    二者都不保证线程安全 可用Collections工具类下的SynchronizedList、CopyOnWriteArrayList代替
    SynchronizedList:       读写都会加锁 synchronized(this){} 如果是读比较多的场景下，会性能不高，所以适合读写均匀的情况。
    CopyOnWriteArrayList:   读不加锁  写加锁(new了一把reentrantLock 保证同一时刻只有一个线程获取到这把锁保证写安全  )
                            但是每次写操作(添加和删除元素等)时都会复制出一个新数组，完成修改后，然后将新数组设置到旧数组的引用上，
                            所以在写比较多的情况下，会有很大的性能开销，所以适合读比较多的应用场景。
        部分代码:
                /** The lock protecting all mutators */
                final transient ReentrantLock lock = new ReentrantLock();
                /** The array, accessed only via getArray/setArray. */
                private transient volatile Object[] array;
                public boolean add(E e) {
                     final ReentrantLock lock = this.lock;
                     //1. 使用Lock,保证写线程在同一时刻只有一个
                     lock.lock();
                     try {
                        //2. 获取旧数组引用
                         Object[] elements = getArray();
                         int len = elements.length;
                         //3. 创建新的数组，并将旧数组的数据复制到新数组中
                         Object[] newElements = Arrays.copyOf(elements, len + 1);
                         //4. 往新数组中添加新的数据
                         newElements[len] = e;
                         //5. 将旧数组引用指向新的数组
                         setArray(newElements);
                         return true;
                     } finally {
                         lock.unlock();
                     }
                 }

